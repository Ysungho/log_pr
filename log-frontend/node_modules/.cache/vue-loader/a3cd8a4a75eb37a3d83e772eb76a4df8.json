{"remainingRequest":"C:\\Visual Studio Code\\log_pr\\log-frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Visual Studio Code\\log_pr\\log-frontend\\src\\components\\Circle.vue?vue&type=template&id=ac6f0a00","dependencies":[{"path":"C:\\Visual Studio Code\\log_pr\\log-frontend\\src\\components\\Circle.vue","mtime":1635836126000},{"path":"C:\\Visual Studio Code\\log_pr\\log-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689391186843},{"path":"C:\\Visual Studio Code\\log_pr\\log-frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1689391188787},{"path":"C:\\Visual Studio Code\\log_pr\\log-frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1689391190261},{"path":"C:\\Visual Studio Code\\log_pr\\log-frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1689391186843},{"path":"C:\\Visual Studio Code\\log_pr\\log-frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1689391189205}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPGRpdj4KICAgIDxkaXYgOmNsYXNzPSJgY2lyY2xlIGNpcmNsZS0ke2NpcmNsZVR5cGV9YCI+PC9kaXY+CiAgICA8cCBjbGFzcz0iZGVzY3JpcHRpb24iPnt7Y2lyY2xlVHlwZX19IDog7LSdIHt7c3BlY0xvZ1tjaXJjbGVUeXBlXX19JSDsgqzsmqnspJE8L3A+CiAgPC9kaXY+Cg=="},{"version":3,"sources":["C:\\Visual Studio Code\\log_pr\\log-frontend\\src\\components\\Circle.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC;IACF,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3E,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Visual Studio Code/log_pr/log-frontend/src/components/Circle.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <div :class=\"`circle circle-${circleType}`\"></div>\n    <p class=\"description\">{{circleType}} : 총 {{specLog[circleType]}}% 사용중</p>\n  </div>\n</template>\n\n<script>\n  import store from '../store'\n  import {\n    computed,\n    onMounted,\n  } from 'vue'\n  import {\n    circleWidth,\n    circleHeight\n  } from '../config'\n  import * as d3 from 'd3'\n  const format = d3.format(\".0%\");\n\n  const pieGenerator = d3.pie().sort(null)\n\n  function arcTween(pie, arc, textDOM) {\n    return function (d) {\n      const interpolate = d3.interpolate(pie[0].startAngle, pie[0].endAngle);\n      const interpolateText = d3.interpolate(0, pie[0].value);\n      return function (t) {\n        d.endAngle = interpolate(t);\n        textDOM.text(format(interpolateText(t) / 100));\n        return arc(d);\n      }\n    }\n  }\n  export default {\n    name: 'circleComponent',\n    props: {\n      type: String,\n      name: String\n    },\n    setup(props) {\n      let svg, arc, foreground, textDOM\n      const specLog = computed(() => store.getters['specLog'])\n      const circleType = computed(() => props.type)\n\n      const setAreaAndScale = (key) => {\n        const radius = Math.min(circleWidth, circleHeight) / 2.5;\n        svg = d3.select(`.circle-${key}`).append(\"svg\")\n          .attr(\"width\", circleWidth)\n          .attr(\"height\", circleHeight)\n          .append(\"g\")\n          .attr(\"transform\", `translate(${circleWidth / 2},${circleWidth / 2})`)\n        arc = d3.arc()\n          .innerRadius(radius * 0.9)\n          .outerRadius(radius);\n        svg.append(\"path\")\n          .data(pieGenerator([100]))\n          .attr(\"class\", \"backColor\")\n          .attr(\"d\", arc)\n        foreground = svg.append(\"path\")\n          .data(pieGenerator([0, 100]))\n          .attr(\"class\", `frontColor-${circleType.value}`)\n          .attr(\"d\", arc)\n        textDOM = svg.append(\"text\")\n          .attr(\"text-anchor\", \"middle\")\n          .attr(\"dy\", \".3em\")\n          .attr(\"font-size\", \"2em\");\n      }\n      //draw에서는 데이터 처리가 아닌 data를 통해서 차트틀 그리는 것에 대해 집중해야 한다. \n      const draw = (data, key) => {\n        data = data[key];\n        foreground.transition()\n          .duration(500)\n          .attrTween(\"d\", arcTween(pieGenerator([data, 100 - data]), arc, textDOM))\n          .delay(1000)\n      }\n      onMounted(() => {\n        setAreaAndScale(circleType.value);\n        store.subscribe((mutation) => {\n          if (mutation.type === \"CHANGE_SPEC\") {\n            draw(specLog.value, circleType.value);\n          }\n        })\n      })\n      return {\n        circleType,\n        specLog\n      }\n    }\n  }\n</script>\n\n<style>\n  p.description {\n    position: relative;\n    bottom: 10px;\n  }\n\n  .backColor {\n    stroke: #e2e2e2;\n    fill: #e2e2e2;\n  }\n\n  .frontColor-cpuUsage {\n    stroke: #69a9cd;\n    fill: #69a9cd;\n\n  }\n\n  .frontColor-memUsage {\n    stroke: #4fc08d;\n    fill: #4fc08d;\n  }\n</style>"]}]}